'''
786. K-th Smallest Prime Fraction

You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

Example 1:

Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.
Example 2:

Input: arr = [1,7], k = 1
Output: [1,7]

Constraints:

2 <= arr.length <= 1000
1 <= arr[i] <= 3 * 104
arr[0] == 1
arr[i] is a prime number for i > 0.
All the numbers of arr are unique and sorted in strictly increasing order.
1 <= k <= arr.length * (arr.length - 1) / 2

Follow up: Can you solve the problem with better than O(n2) complexity?

Test case:

[1,3,17,29,37,47,71,73,79,83,113,151,181,197,347,491,601,607,683,727,743,809,811,853,907,911,929,937,1009,1051,1063,1097,1187,1279,1303,1307,1361,1373,1409,1427,1453,1531,1553,1583,1601,1627,1657,1663,1721,1723,1747,1787,1831,1861,1873,1933,2003,2027,2029,2069,2099,2111,2129,2161,2179,2213,2269,2539,2557,2579,2593,2609,2633,2689,2693,2707,2749,2753,2791,2803,2851,2857,2897,2953,2957,2963,3037,3061,3079,3137,3187,3191,3229,3313,3359,3371,3467,3491,3533,3539,3623,3673,3701,3727,3779,3823,3911,3919,3923,3989,4019,4021,4099,4111,4139,4231,4349,4507,4561,4643,4721,4889,4969,4999,5009,5051,5197,5227,5261,5273,5281,5297,5309,5323,5413,5437,5501,5641,5653,5683,5737,5791,5857,5861,5939,6151,6163,6257,6301,6329,6337,6359,6473,6563,6571,6841,6857,6869,6967,6977,7057,7079,7151,7159,7243,7297,7307,7393,7411,7451,7537,7559,7589,7793,7901,7907,7919,8053,8161,8171,8233,8291,8317,8599,8609,8623,8641,8689,8753,8807,8933,8963,9013,9041,9103,9157,9203,9337,9343,9371,9413,9421,9533,9631,9719,9803,9811,9833,9923,9949,10301,10303,10321,10457,10477,10529,10559,10667,10687,10711,10729,10789,10831,10837,10891,10973,11117,11171,11173,11311,11329,11393,11411,11549,11621,11717,11779,11783,11863,11887,11897,11971,12011,12071,12101,12109,12113,12241,12281,12377,12379,12413,12451,12487,12511,12619,12659,12697,12713,12739,12757,12781,12809,12829,12893,12899,12923,12967,13063,13127,13217,13309,13331,13339,13367,13441,13619,13691,13709,13723,13757,13789,13831,13841,13873,13877,14387,14407,14411,14437,14447,14537,14657,14813,14887,14891,14969,15017,15031,15121,15217,15233,15473,15541,15629,15649,15661,15671,15959,15991,16067,16073,16091,16111,16231,16319,16369,16427,16447,16453,16487,16529,16547,16553,16673,16691,16693,16729,16901,16903,16993,17027,17047,17093,17159,17167,17293,17401,17573,17807,17903,17909,17921,17939,17959,18041,18077,18131,18223,18413,18457,18587,18617,18637,18793,18917,18979,19001,19009,19013,19037,19121,19141,19181,19213,19237,19267,19273,19309,19333,19387,19429,19447,19463,19489,19867,19913,19919,19973,20047,20051,20063,20107,20117,20143,20261,20359,20479,20533,20563,20611,20627,20639,20641,20663,20749,20771,20807,20809,20857,21001,21017,21101,21143,21397,21817,21839,21841,21881,21937,22003,22013,22109,22111,22129,22133,22157,22159,22189,22247,22303,22307,22367,22409,22453,22511,22541,22619,22739,22807,22817,22871,23197,23203,23269,23297,23399,23447,23561,23719,23741,23753,23773,23813,23827,23831,23893,23909,24007,24223,24337,24439,24473,24697,24763,24793,24809,24821,24841,24847,25013,25057,25097,25111,25171,25183,25229,25237,25243,25303,25309,25321,25463,25469,25541,25601,25693,25741,25763,26107,26227,26261,26267,26309,26321,26339,26387,26393,26489,26573,26633,26647,26669,26687,26821,26891,26893,26927,26951,26959,27011,27031,27059,27073,27109,27239,27283,27299,27431,27583,27631,27701,27779,27803,27851,27943,27997,28019,28099,28111,28151,28181,28279,28351,28493,28579,28621,28643,28649,28723,28729,28859,28871,28949,29201,29269,29339,29387,29411,29569,29599,29629,29669,29761,29851]
39824
[1,2,3,5]
3
[1,7]
1
[1,19,71,107,307,367,419,1009,1153,1297,1373,1693,1931,2389,2609,2731,2917,3461,3613,3677,4001,4013,4201,4513,4691,5323,5333,5503,6701,7283,7433,7621,7673,8053,8191,8387,9043,9239,9433,9923,10321,10627,10639,10723,11279,11411,11779,11801,12437,12473,12703,13799,13997,14051,14251,14653,14683,14759,14797,15091,15149,15217,16987,17467,18253,18541,18731,19051,19259,19813,19963,20149,20347,20369,20879,20899,21521,22079,22571,22709,22783,22859,23087,23567,23593,24847,24917,25117,25601,25903,26029,26407,26437,26573,27271,27803,27901,27961,28307,29017]
4733
[1,2029,3209,3517,3823,4933,8209,8893,12763,12799,14197,14387,18973,19207,23747,24547,24953,25247,25763,27043]
1
[1,13,17,59]
6
'''

from typing import List
from heapq import heappush, heappop

class Solution:
  '''
  time complexity is around O(k*log(n))
  '''
  def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
    n = len(arr)
    stack = sorted((arr[i]/arr[n-1], i, n-1) for i in range(n-1))
    pos = 1
    
    while stack and pos < k:
      _, i, j = heappop(stack)
      if i < j-1:
        heappush(stack, (arr[i]/arr[j-1], i, j-1))
      
      pos += 1
    
    _, i, j = stack[0]
    return [arr[i], arr[j]]
        
